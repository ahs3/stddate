Standard Reference Time
=======================

An Exercise in "Decimalizing" Time
----------------------------------
The current system of time measurement is, you have to admit, a bit
obtuse.  The use of 60 units appears to come from Babylonians or some
such.  Then, there's the idea of a week that might be based on creation
myths, as in the length of time $DEITY took to create everything.  At
least a day has some basis in immediately observable phenomena.  The
idea of a month seems close, too, but then everyone needed one named
after themselves, and their month had to be longer than everyone else's.
So, you know, a very human, muddled up, mish-mash of things.

The Metric System took care of a lot of silliness with weights and
measures (I'm looking at you, U.S. of A...).  As we -- humankind --
start to leave our planet, none of these things will make any sense
to someone not from here.  We may need to maintain some of them just
because of our biology, but if you've adapted to a day that's not 24
of our current hours long, why does your day need to be 24 hours?  Or,
how does a month translate when you have no moon?  Or maybe you have
three?

The Proposal
------------
Let's posit a Standard Reference Time, composed of simple units, that
is independent of all of the baggage.  This "SRT" (not flashy, but not
all acronyms are fun) could be completely decimal based.  Granted, if
your normal number system is not base 10, this is kind of presumptous.
Nevertheless, let's start here.  Further, let's start from a very basic
definition:

   The basic unit of measurement is a "second", as in the current SI
   standard definition of 9,192,631,770 state transitions of a Cesium
   133 atom.  This is one (1) standard second.

We can then derive further units:

   1 standard minute = 100 standard seconds
   1 standard hour   = 100 standard minutes
   1 standard day    =  10 standard hours
   1 standard week   =  10 standard days
   1 standard month  =  10 standard weeks
   1 standard year   =  10 standard months

Perhaps each gradation should be multiplied by 10 (and not 100); this
definition just reflects my human bias, I suppose, but let's just live
with it for now.

Every "calendar" like this needs a starting point, an "epoch".  Just
because it sounds sort of cool, let's have time 0 be the moment Neil
Armstrong first stepped on the moon: Jul 16 13:32:00 1969 UTC, in the
current system.

The epoch could then be 0000.0.0.0 00:00:00 SRT [yyyy.m.w.d hh:mm:ss].

A recent date and time -- Jan 12 23:36:04 2024 UTC -- would be converted
to a number of seconds since the epoch (1705102564) and then a lot of
division by ten occurs to get: 0017.0.5.1 00:25:64 SRT.

So What?
--------
For the most, this just amuses me.  I've contemplated the idea of a
decimal based time system since I was about six.

On the other hand, there's the idea that SRT becomes a basis for all
other clocks, regardless of where they are.  Current UTC is just some
arithmetic conversion, for example.  Leap seconds and all that is
whatever is convenient in that frame of reference; time zones are just
a few more conversions.

Where this could be more useful is when we leave Earth.  If we think of
a vehicle traveling at some portion of c (the speed of light) relative
to the Earth, then SRT could be local time on the vehicle.  We would be
able to be fairly precise about the time on Earth since we know how we
have been traveling relative to Earth, and can therefore do the math to
determine Earth time, factoring in any time dilation effects that have
occurred.

Take this thought experiment a bit further.  SRT could be roughly the
same on the Earth and the moon (someone would need to check on any
relativistic effect and compensate for that).  At a minimum, we would
know how to convert back and forth, even if folks on the moon chose some
other epoch.  Similarly for Mars.  Or any spacecraft at all.

What Next?
----------
I have no idea.  I find this whole idea fascinating.  I've created the
stddate.c code here to convert current time to SRT; it needs further
changes to convert arbitrary dates and times to SRT, and to be able to
convert SRT back to UTC and/or local time.

In the meantime, this has been fun :).  I've even set up an LED display
on my desk showing current UTC and SRT, just because I can.


Notes:
------
-- All code and documentation here is:
       Copyright (c) 2024, Al Stone <ahs3@ahs3.net>
       SPDX-License-Identifier: GPL-2.0-only

-- SI second definition: https://www.bipm.org/en/si-base-units/second

